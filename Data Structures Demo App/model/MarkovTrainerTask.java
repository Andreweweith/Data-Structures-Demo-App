package model;

import javafx.concurrent.Task;

/**
 * Task Class for the MarkovGenerator.
 * <p>
 * The call method for this task will read data from an input string 
 * and place the data into a custom LinkedList class. It will then
 * return the completed list.
 * <p>
 * To obtain the starter String generated by the call method, it must
 * be obtained upon completion of this task.
 * 
 * @author Andrew
 */
public class MarkovTrainerTask extends Task<TrainerDataPackage>{

	private String trainerText;
	
	private MyLinkedList<ListNode> wordList;
	
	private String starter;
	
	/** 
	 * Constructor for the Trainer Task. Class contains starter data 
	 * after being called
	 * 
	 * @param sourceText */
	public MarkovTrainerTask(String sourceText) {
		trainerText = sourceText;
		
		wordList = new MyLinkedList<ListNode>();
		starter = "";
	}
	
	@Override
	public TrainerDataPackage call() throws Exception {

		if (trainerText.length() == 0) {
			System.out.println("There is no input");
		} 
		else {
			String[] sourceWords = trainerText.split("\\s+");
			starter = sourceWords[0];
			String previousWord = starter;
			String word;
			ListNode node;
			for (int i = 1; i <= sourceWords.length; i++) {
				
				updateProgress(i, sourceWords.length);
				updateMessage("     Training Text: " + i + " Words Trained");
				
				if (i == sourceWords.length) {
					word = sourceWords[0];
				} 
				else {
					word = sourceWords[i];
				}
				
				node = findNode(previousWord);
				if (node == null) {
					node = new ListNode(previousWord);
					node.addNextWord(word);
					wordList.add(node);
				} 
				else {
					node.addNextWord(word);
				}
				previousWord = word;
			}
		}
		
		TrainerDataPackage dataPackage = new TrainerDataPackage(wordList, starter);
		
		return dataPackage;
	}
	
	@Override
	protected void succeeded() {
		super.succeeded();
		updateMessage("     Training Complete!");
		updateProgress(-1, -1);
	}

	private ListNode findNode(String word) {
		for (ListNode node : wordList) {
			if (word.equals(node.getWord())) {
				return node;
			}
		}
		return null;
	}
	
	@SuppressWarnings("javadoc")
	public String getStarter() {
		return this.starter;
	}
}
